package com.java.testdriven.chapter05;

/**
 * 	为何要关心设计
 *	
 *
 *	【设计原则】
 *	TDD倡导程序员遵守一些让代码更清晰、更易读的原则和良好实践，从而确保代码易于理解并能安全地修改。
 *
 *	（一）你不会需要它
 *	YAGNI是设计原则You Ain’t Gonna Need It（你不会需要它）的首字母缩写，旨在消除所有冗余代码，并专注于当前而不是未来的功能。
 *	代码越少，需要维护的代码就越少，同时引入bug的可能性也越小。
 *
 *	（二）不要自我重复
 *	不要自我重复（DRY）原则基于的理念是，重用而不是复制以前编写的代码。
 *	这样做的好处是，需要维护的代码更少，并确信使用的代码是可行的。
 *	另外，这还有助于在代码中发现新的抽象层级。
 *
 *	（三）保持简单
 *	这个原则指出，越简单的东西越能实现其功能。
 *
 *	（四）奥卡姆剃刀原理
 *	“如果你有两个或多个类似的解决方案，选择最简单的。”——奥卡姆的威廉
 *
 *	（五）SOLID
 *	SOLID是Robert C. Martin发明的一个首字母缩写，涵盖5个面向对象编程的基本原则。
 *	通过遵守这5个原则，开发人员更有可能打造卓越、持久和易于维护的应用程序：
 *	1、单一职责原则：一个类应该只有一个导致它需要修改的原因。
 *	2、开闭原则：类应该对扩展是开放的，对修改是封闭的。这个原则最初由Bertrand Meyer提出。
 *	3、里氏替换原则：这个原则是Barbara Liskov提出的，她指出，类应该能够被扩展它的类替换。
 *	4、接口分离原则：提供多个具体接口胜过提供单个通用接口。  
 *	5、依赖倒转原则：类应依赖于抽象而不是实现，这意味着类依赖必须专注于做什么而不是如何做。
 *
 *
 *	前4个原则是TDD思维的核心，因为它们旨在简化代码，而最后一个原则专注于类的编写和依赖关系。
 *
 *	@author hzweiyongqiang
 */
public class Course1CareDesign {

}
