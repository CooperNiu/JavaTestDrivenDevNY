package com.java.testdriven.chapter01;

/**
 * 	为何要使用 TDD
 *	
 *	@author hzweiyongqiang
 */
public class Course10WhyTDD {
/**
 * 
 * 	面临过下述一个乃至更多痛点、问题或导致交付失败的原因：
  	**	部分团队成员无缘参与需求、规范或用户故事的制定；
  **	大部分乃至全部测试都是手动的，抑或根本就没有测试；
  **	虽然使用了自动化测试，但并未检测出真正的问题；
  **	编写并执行自动化测试的时间太晚，无法给项目带来真正的价值；
  **	总是有更紧急的问题需要处理，没法腾出专门用于测试的时间；
  **	整个团队分为测试、开发和功能分析小组，而这些小组常常不能同步；
  **	无法重构代码，因为担心这样做会破坏既有的功能；
  **	维护成本高；
  **	上市时间过长；
  **	客户觉得交付的产品不符合要求；
  **	文档从来都不是最新的；
  **	害怕部署到生产环境，因为结果无法预料；
  **	常常无法部署到生产环境，因为运行回归测试的时间太长；
  **	团队为搞清楚某些方法或类的作用花费的时间太多。
 *	
 *	测试驱动开发并不能神奇地解决所有这些问题，而只为我们找到解决方案指明方向。
 *
 *	测试驱动开发可缩短上市时间、简化重构工作、帮助创建更好的设计以及降低耦合程度。
 *	除这些直接的好处外，TDD还是众多其他实践（如持续交付）的前提条件。
 *	使用TDD可改善设计和代码的质量、缩短上市时间、确保文档最新、获得极高的代码覆盖率等。
 * 
 */
}
