package com.java.testdriven.chapter01;

/**
 * 	可执行的文档
 * 
 * 	TDD（以及更多结构良好的测试）另一个很有用的方面是文档。
 * 	要搞清楚代码是干什么的，在大多数情况下通过查看测试比查看实现本身要容易得多。
 *	以测试方式编写的文档是TDD的支柱之一，有必要更深入地了解。
 *
 *	传统软件文档存在的主要问题是，它们通常都不是最新的。
 *	一部分代码发生变化后，文档便不再反映实际情况。
 *	几乎任何类型的文档都如此，需求和测试用例受到的影响最大。
 *
 *	需要为代码编写文档通常意味着代码本身写得不好。
 *	另外，不管你如何努力，文档都必然会过期。
 *
 *	开发人员不应依赖于系统文档，因为它几乎在任何时候都不是最新的。
 *	另外，在详尽而及时地描述代码方面，没有任何文档比代码本身做得更好。
 *
 *	将代码用作文档并不意味着不能有其他类型的文档，关键是避免重复。	
 *	如果说通过阅读代码可获悉系统细节，那么其他类型的文档可提供快速指南和概述。
 *	
 *	实现代码提供了所需的所有细节，而测试代码描述了产品代码背后的意图。
 *	测试就是可执行的文档，而TDD是创建和维护这种文档的最常用方式。
 *
 *	@author hzweiyongqiang
 */
public class Course4ExecutableDocument {

}
