package com.java.testdriven.chapter06;

/**
 * 	模拟
 *	
 *
 *	依赖可能包括：
 *	1、其他小组成员编写的类和方法
 *	2、来自第三方库的类和方法
 *	3、要与之通信的外部系统
 *	4、JDK中的库
 *	5、数据访问层通信
 *	6、所有的公有和受保护的方法（即便这些方法位于受测类）
 *	7、…………
 *
 *	在单元测试层面使用TDD时，如果规范需要考虑所有这些依赖，创建将过于复杂，导致测试本身成为瓶颈。
 *	开发测试的时间可能急增，导致TDD带来的好处很快被不断增加的成本抵消。
 *	更重要的是，这些依赖常常导致测试非常复杂，以至于它们包含的bug比实现本身还多。
 *	
 *	单元测试旨在验证单个单元是否正常，而不考虑依赖，TDD中的单元测试尤其如此。
 *	对于内部依赖，我们已对其进行过测试，知道它们的行为符合预期；但对于外部依赖，你也必须信任它们——相信它们能够正常工作。
 *
 *	为专注于单元，我们必须竭力消除它可能使用的所有依赖，这是通过结合利用设计和模拟实现的。
 *
 *	使用模拟对象其优点包括：代码依赖更少；测试执行速度更快。
 *
 *	@author hzweiyongqiang
 */
public class Course10Mocking {

}
